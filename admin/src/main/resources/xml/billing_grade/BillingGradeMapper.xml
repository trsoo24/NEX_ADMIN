<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.admin.billing_grade.mapper.BillingGradeMapper">
    <insert id="insertBillingGrade" parameterType="com.example.admin.billing_grade.dto.BillingGrade">
        INSERT INTO TB_BILLING_GRADE(CUST_GRD_CD, STAT_YYMM, REG_DT, ALL_ACE_CNT, ALL_CNT, ALL_AMOUNT, PAID_ACE_CNT, PAID_CNT, PAID_AMOUNT, UNPAID_ACE_CNT, UNPAID_CNT, UNPAID_AMOUNT, DCB)
        VALUES (#{custGrdCd}, #{statYyMm}, #{regDt},#{allAceCnt}, #{allCnt}, #{allAmount}, #{paidAceCnt}, #{paidCnt}, #{paidAmount}, #{unpaidAceCnt}, #{unpaidCnt}, #{unpaidAmount}, #{dcb})
    </insert>

    <select id="generateBillingGrade" parameterType="com.example.admin.billing_grade.dto.BillingGrade" resultType="com.example.admin.billing_grade.dto.BillingGrade">
        WITH BASE_DATA AS (
            SELECT
                CASE
                    WHEN CUST_GRD_CD IS NULL THEN
                        CASE WHEN GROUPING(CUST_GRD_CD) = 0 THEN 'E' ELSE 'A' END
                    ELSE CUST_GRD_CD
                    END AS CUST_GRD_CD,
                SUM(CASE WHEN API_TYPE = 'charge' THEN AMOUNT ELSE 0 END) AS CHARGE,
                SUM(CASE WHEN API_TYPE = 'reversal' THEN AMOUNT ELSE 0 END) AS REVERSE,
                SUM(CASE WHEN API_TYPE = 'refund' THEN AMOUNT ELSE 0 END) AS REFUND,
                COUNT(DISTINCT MSISDN) AS ACE_CNT,
                COUNT(*) AS CNT,
                BAN_UNPAID_YN_CODE
            FROM TB_API_LOGS
            WHERE
                CREATE_DT BETWEEN TO_DATE(#{firstDay}, 'YYYYMMDDHH24MISS') AND TO_DATE(#{lastDay}, 'YYYYMMDDHH24MISS')
              AND RESULT_CODE = #{resultCode}
              AND API_TYPE IN (#{api_type1}, #{api_type2}, #{api_type3})
            GROUP BY ROLLUP(CUST_GRD_CD), BAN_UNPAID_YN_CODE
        )
        SELECT
            A.CUST_GRD_CD,
            NVL(A.CHARGE, 0) AS A_CHARGE, NVL(A.REVERSE, 0) AS A_REVERSE, NVL(A.REFUND, 0) AS A_REFUND,
            NVL(A.ACE_CNT, 0) AS ALL_ACE_CNT, NVL(A.CNT, 0) AS ALL_CNT,
            NVL(B.CHARGE, 0) AS P_CHARGE, NVL(B.REVERSE, 0) AS P_REVERSE, NVL(B.REFUND, 0) AS P_REFUND,
            NVL(B.ACE_CNT, 0) AS PAID_ACE_CNT, NVL(B.CNT, 0) AS PAID_CNT,
            NVL(C.CHARGE, 0) AS U_CHARGE, NVL(C.REVERSE, 0) AS U_REVERSE, NVL(C.REFUND, 0) AS U_REFUND,
            NVL(C.ACE_CNT, 0) AS UNPAID_ACE_CNT, NVL(C.CNT, 0) AS UNPAID_CNT
        FROM BASE_DATA A
                 LEFT JOIN BASE_DATA B ON A.CUST_GRD_CD = B.CUST_GRD_CD AND B.BAN_UNPAID_YN_CODE = #{paid}
                 LEFT JOIN BASE_DATA C ON A.CUST_GRD_CD = C.CUST_GRD_CD AND C.BAN_UNPAID_YN_CODE = #{unpaid}
        WHERE A.BAN_UNPAID_YN_CODE IS NULL;
    </select>

    <!-- 등급별 통계 존재유무 확인 -->
    <select id="getStatsGradeBillingCnt" resultType="Integer">
        SELECT COUNT(*)
        FROM TB_GRADE_BILLING
        WHERE STAT_YYMM = #{stat_yymm}
    </select>
</mapper>